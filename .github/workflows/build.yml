name: build

# Trigger the workflow on push and pull requests
on: [push, pull_request]

# Define the build job
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 18.16.0

    # Define steps to execute
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
      # Detect the package manager (npm or yarn)
      - name: Detect Package Manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      # Setup Node with the specified version and cache
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      # Cache Node Modules for faster builds
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      # Install project dependencies based on the detected package manager
      - name: Install Dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      # Run linting
      - name: Run Lint
        run: ${{ steps.detect-package-manager.outputs.manager }} run lint
